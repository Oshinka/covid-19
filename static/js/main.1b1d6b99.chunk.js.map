{"version":3,"sources":["logo.svg","components/Country/Country.js","components/CountryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","stats","className","src","CountryCode","alt","Active","Confirmed","Deaths","Recovered","CountryList","map","country","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","countries","fetch","resp","json","this","forEach","a","Slug","data","length","prevState","concat","ISO2","filteredCountries","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,gMCkB5BC,G,kBAfC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACI,yBAAKC,UAAU,WACX,yBAAKC,IAAG,sCAAiCF,EAAMG,YAAvC,gBAAkEC,IAAKJ,EAAMD,UACrF,4BAAKC,EAAMD,SACX,yBAAKE,UAAU,YACX,8CAAgBD,EAAMK,SACtB,iDAAmBL,EAAMM,YACzB,8CAAgBN,EAAMO,SACtB,iDAAmBP,EAAMQ,gBCC1BC,G,MATK,SAAC,GAAa,IAAZT,EAAW,EAAXA,MAClB,OACI,yBAAKC,UAAU,eAEPD,EAAMU,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAQR,YAAaH,MAAOW,UCGhEE,EATG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OAAO,2BACCC,KAAK,SACLf,UAAU,SACVa,YAAaA,EACbG,SAAUF,KC2CPG,E,kDA3Cb,aAAc,IAAD,8BACX,gBAqBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SArBpC,EAAKC,MAAQ,CACXC,UAAU,GACVzB,MAAM,GACNqB,YAAY,IALH,E,yMASQK,MAAM,wC,cAAnBC,E,gBACkBA,EAAKC,O,OAAvBH,E,OACNI,KAAKT,SAAS,CAACK,cACfI,KAAKL,MAAMC,UAAUK,QAArB,uCAA6B,WAAMnB,GAAN,iBAAAoB,EAAA,sEACRL,MAAM,2CAAD,OAA4Cf,EAAQqB,OADjD,cACrBL,EADqB,gBAERA,EAAKC,OAFG,QAErBK,EAFqB,QAGnBC,QACR,EAAKd,UAAS,SAAAe,GAAS,MACrB,CAACnC,MAAMmC,EAAUnC,MAAMoC,OAAhB,2BAA2BH,EAAKA,EAAKC,OAAS,IAA9C,IAAkD/B,YAAYQ,EAAQ0B,YALpD,2CAA7B,kCAAAR,KAAA,gB,qIAcO,IAAD,EACuBA,KAAKL,MAA3BxB,EADD,EACCA,MAAOqB,EADR,EACQA,YACRiB,EAAoBtC,EAAMuC,QAAO,SAAA5B,GAAO,OAC5CA,EAAQZ,QAAQyC,cAAcC,SAASpB,EAAYmB,kBAErD,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CACEa,YAAY,qBACZC,aAAcc,KAAKd,eAErB,kBAAC,EAAD,CAAaf,MAASsC,S,GAtCZI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b1d6b99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Country.css'\n\nconst Country = ({stats}) => {\n    return (\n        <div className='country'>\n            <img src={`https://www.countryflags.io/${stats.CountryCode}/flat/64.png`} alt={stats.Country}></img>\n            <h2>{stats.Country}</h2>\n            <div className='describe'>\n                <p>{`Active : ${stats.Active}`}</p>\n                <p>{`Confirmed : ${stats.Confirmed}`}</p>\n                <p>{`Deaths : ${stats.Deaths}`}</p>\n                <p>{`Recovered : ${stats.Recovered}`}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Country;","import React from 'react';\nimport Country from '../Country/Country'\nimport './CountryList.css'\n\nconst CountryList = ({stats}) => {\n    return (\n        <div className='countryList'>\n            {\n                stats.map(country => <Country key={country.CountryCode} stats={country}/>)\n            }\n        </div>\n    )\n}\nexport default CountryList;","import React from 'react';\n\nconst SearchBox = ({placeholder, handleChange}) => {\n    return(<input \n            type='search' \n            className='search' \n            placeholder={placeholder} \n            onChange={handleChange}\n        />)\n}\n\nexport default SearchBox;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CountryList from './components/CountryList/CountryList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      countries:[],\n      stats:[],\n      searchField:''\n    }\n  }\n  async componentDidMount(){\n    const resp = await fetch('https://api.covid19api.com/countries')\n    const countries = await resp.json()\n    this.setState({countries})\n    this.state.countries.forEach(async country => {\n      const resp = await fetch(`http://api.covid19api.com/total/country/${country.Slug}`)\n      const data = await resp.json()\n      if(data.length)\n      this.setState(prevState => (\n        {stats:prevState.stats.concat({...data[data.length - 1], CountryCode:country.ISO2})}\n      ))\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n    const {stats, searchField} = this.state\n    const filteredCountries = stats.filter(country => (\n      country.Country.toLowerCase().includes(searchField.toLowerCase())\n    ))\n    return (\n      <div className=\"App\">\n        <SearchBox \n          placeholder=\"Enter country name\"\n          handleChange={this.handleChange}\n        />\n        <CountryList stats = {filteredCountries}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}